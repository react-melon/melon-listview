{"version":3,"sources":["ListView.js"],"names":["cx","ListView","render","props","component","dataSource","renderRow","rest","total","dataBlob","length","bodyComponent","map","row","index","rowShouldUpdate","bind","getRowData","createElement","className","build","displayName","propTypes","func","isRequired","string","instanceOf","defaultProps","DataSource"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAWA,QAAMA,KAAK,uBAAO,UAAP,CAAX;;QAEqBC,Q;;;;;;;;2BAEjBC,M,qBAAS;;AAEL,gBAAMC,QAAQ,KAAKA,KAAnB;;AAFK,gBAKDC,SALC,GASDD,KATC,CAKDC,SALC;AAAA,gBAMDC,UANC,GASDF,KATC,CAMDE,UANC;AAAA,gBAODC,SAPC,GASDH,KATC,CAODG,SAPC;AAAA,gBAQEC,IARF,wCASDJ,KATC;;;AAWL,gBAAMK,QAAQH,WAAWI,QAAX,CAAoBC,MAAlC;AACA,gBAAMC,gBAAgBN,WAAWI,QAAX,CAAoBG,GAApB,CAAwB,UAAUC,GAAV,EAAeC,KAAf,EAAsB;;AAEhE,uBACI;AACI,yBAAKA,KADT;AAEI,kCAAcT,WAAWU,eAAX,CAA2BD,KAA3B,CAFlB;AAGI,4BAAQR,UAAUU,IAAV,CACJ,IADI,EAEJX,WAAWY,UAAX,CAAsBH,KAAtB,CAFI,EAGJA,KAHI,EAIJN,KAJI,CAHZ,GADJ;AAWH,aAbqB,CAAtB;;AAeA,mBAAO,mBAAMU,aAAN,CACHd,SADG,8BAGIG,IAHJ;AAICY,2BAAWnB,GAAGG,KAAH,EAAUiB,KAAV;AAJZ,gBAMHT,aANG,CAAP;AASH,S;;;;;yBAtCgBV,Q;;;AA0CrBA,aAASoB,WAAT,GAAuB,UAAvB;;AAEApB,aAASqB,SAAT,GAAqB;AACjBhB,mBAAW,iBAAUiB,IAAV,CAAeC,UADT;AAEjBpB,mBAAW,iBAAUqB,MAFJ;AAGjBpB,oBAAY,iBAAUqB,UAAV,0BAAiCF;AAH5B,KAArB;;AAMAvB,aAAS0B,YAAT,GAAwB;AACpBvB,mBAAW;AADS,KAAxB;;AAIAH,aAAS2B,UAAT","file":"ListView.js","sourcesContent":["/**\n * @file ListView\n * @author cxtom(cxtom2008@gmail.com)\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport DataSource from './DataSource';\nimport StaticRender from './StaticRenderer';\n\nconst cx = create('ListView');\n\nexport default class ListView extends Component {\n\n    render() {\n\n        const props = this.props;\n\n        const {\n            component,\n            dataSource,\n            renderRow,\n            ...rest\n        } = props;\n\n        const total = dataSource.dataBlob.length;\n        const bodyComponent = dataSource.dataBlob.map(function (row, index) {\n\n            return (\n                <StaticRender\n                    key={index}\n                    shouldUpdate={dataSource.rowShouldUpdate(index)}\n                    render={renderRow.bind(\n                        null,\n                        dataSource.getRowData(index),\n                        index,\n                        total\n                    )}/>\n            );\n        });\n\n        return React.createElement(\n            component,\n            {\n                ...rest,\n                className: cx(props).build()\n            },\n            bodyComponent\n        );\n\n    }\n\n}\n\nListView.displayName = 'ListView';\n\nListView.propTypes = {\n    renderRow: PropTypes.func.isRequired,\n    component: PropTypes.string,\n    dataSource: PropTypes.instanceOf(DataSource).isRequired\n};\n\nListView.defaultProps = {\n    component: 'div'\n};\n\nListView.DataSource = DataSource;\n"],"sourceRoot":"/source/"}