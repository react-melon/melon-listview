{"version":3,"sources":["DataSource.js"],"names":["defaultRowHasChanged","r1","r2","defaultGetRowData","dataBlob","rowID","DataSource","options","_rowHasChanged","rowHasChanged","_getRowData","getRowData","dirtyRows","cloneWithRows","newSource","calculateDirtyArrays","rowIndex","rowShouldUpdate","prevDataBlob","i","length","dirty","push"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;AAKA,aAASA,oBAAT,CAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;AAClC,eAAOD,OAAOC,EAAd;AACH;;AAED,aAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,KAArC,EAA4C;AACxC,eAAOD,SAASC,KAAT,CAAP;AACH;;QAEoBC,U;AAEjB,8BAA0B;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AAAA;;AACtB,iBAAKC,cAAL,GAAsBD,QAAQE,aAAR,IAAyBT,oBAA/C;AACA,iBAAKU,WAAL,GAAmBH,QAAQI,UAAR,IAAsBR,iBAAzC;AACA,iBAAKC,QAAL,GAAgB,EAAhB;AACA,iBAAKQ,SAAL,GAAiB,EAAjB;AACH;;6BAEDC,a,0BAAcT,Q,EAAU;;AAEpB,gBAAIU,YAAY,IAAIR,UAAJ,CAAe;AAC3BK,4BAAY,KAAKD,WADU;AAE3BD,+BAAe,KAAKD;AAFO,aAAf,CAAhB;;AAKAM,sBAAUV,QAAV,GAAqBA,QAArB;AACAU,sBAAUC,oBAAV,CAA+B,KAAKX,QAApC;;AAEA,mBAAOU,SAAP;AACH,S;;6BAEDH,U,uBAAWK,Q,EAAU;AACjB,mBAAO,KAAKN,WAAL,CAAiB,KAAKN,QAAtB,EAAgCY,QAAhC,CAAP;AACH,S;;6BAEDC,e,4BAAgBD,Q,EAAU;AACtB,mBAAO,KAAKJ,SAAL,CAAeI,QAAf,CAAP;AACH,S;;6BAEDD,oB,iCAAqBG,Y,EAAc;;AAE/B,iBAAKN,SAAL,GAAiB,EAAjB;;AAEA,iBAAK,IAAIO,IAAI,KAAKf,QAAL,CAAcgB,MAAd,GAAuB,CAApC,EAAuCD,KAAK,CAA5C,EAA+CA,GAA/C,EAAoD;AAChD,oBAAME,QAAQ,CAACH,aAAaC,CAAb,CAAD,IACP,KAAKX,cAAL,CACC,KAAKE,WAAL,CAAiBQ,YAAjB,EAA+BC,CAA/B,CADD,EAEC,KAAKT,WAAL,CAAiB,KAAKN,QAAtB,EAAgCe,CAAhC,CAFD,CADP;AAKA,qBAAKP,SAAL,CAAeU,IAAf,CAAoB,CAAC,CAACD,KAAtB;AACH;AAEJ,S;;;;;yBA3CgBf,U","file":"DataSource.js","sourcesContent":["/**\n * @file ListView DataSource\n * @author  cxtom(cxtom2008@gmail.com)\n */\n\nfunction defaultRowHasChanged(r1, r2) {\n    return r1 !== r2;\n}\n\nfunction defaultGetRowData(dataBlob, rowID) {\n    return dataBlob[rowID];\n}\n\nexport default class DataSource {\n\n    constructor(options = {}) {\n        this._rowHasChanged = options.rowHasChanged || defaultRowHasChanged;\n        this._getRowData = options.getRowData || defaultGetRowData;\n        this.dataBlob = [];\n        this.dirtyRows = [];\n    }\n\n    cloneWithRows(dataBlob) {\n\n        let newSource = new DataSource({\n            getRowData: this._getRowData,\n            rowHasChanged: this._rowHasChanged\n        });\n\n        newSource.dataBlob = dataBlob;\n        newSource.calculateDirtyArrays(this.dataBlob);\n\n        return newSource;\n    }\n\n    getRowData(rowIndex) {\n        return this._getRowData(this.dataBlob, rowIndex);\n    }\n\n    rowShouldUpdate(rowIndex) {\n        return this.dirtyRows[rowIndex];\n    }\n\n    calculateDirtyArrays(prevDataBlob) {\n\n        this.dirtyRows = [];\n\n        for (let i = this.dataBlob.length - 1; i >= 0; i--) {\n            const dirty = !prevDataBlob[i]\n                || this._rowHasChanged(\n                    this._getRowData(prevDataBlob, i),\n                    this._getRowData(this.dataBlob, i)\n                );\n            this.dirtyRows.push(!!dirty);\n        }\n\n    }\n\n}\n"],"sourceRoot":"/source/"}